call plug#begin()
Plug 'rking/ag.vim'
Plug 'ervandew/supertab'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'kien/ctrlp.vim'
Plug 'nanotech/jellybeans.vim'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'wincent/terminus'
Plug 'eugen0329/vim-esearch'
Plug 'idanarye/vim-merginal'
Plug 'gregsexton/gitv', {'on': ['Gitv']}
Plug 'rhysd/vim-grammarous'
Plug 'morhetz/gruvbox'
Plug 'jremmen/vim-ripgrep'
call plug#end()

inoremap jj <ESC>

syntax on
filetype plugin indent on
filetype plugin on
set number
set tabstop=2 shiftwidth=2
set expandtab
set guioptions=Ace
set backspace=indent,eol,start
set encoding=utf-8
set showcmd
set laststatus=2
set splitbelow splitright
set lazyredraw
set fillchars+=vert:\
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8
set smarttab
set nocompatible
set history=1000
set hlsearch
set incsearch
set ignorecase
set smartcase
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.pdf,*.bak,*.beam,.DS_Store,node_modules,bower_components,tmp
set viminfo+=!
set cursorline

let mapleader = ","
let g:Powerline_symbols = 'fancy'
let g:ruby_path = system('echo $HOME/.rbenv/shims')
let g:netrw_liststyle=3
let g:netrw_list_hide= '.*\.swp,.DS_Store$'
let html_no_rendering=1

" go to the last position if available
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

map '' :set hlsearch!<CR>
map <leader>e :Ex<CR>
map <leader>z :NERDTreeToggle<CR>
map <leader>f :Rg<space>
map <leader>gl :GitGutterLineHighlightsToggle<CR>
map <leader>q :wq<CR>
map <leader>x :TagbarToggle<CR>
map <C-h> <C-w><left>
map <C-l> <C-w><right>
map <C-j> <C-w><down>
map <C-k> <C-w><up>
map <leader>t :CtrlP<CR>
map <leader>m :MerginalToggle<CR>
"map <leader>a :Ag<space>
map <leader>a :Rg<space>
map <leader>` :terminal<cr>

" don't move when selecting with *
nnoremap * *<c-o>
" search visual selection
vnoremap \\ y/<C-R>"<CR>
" get ready to replace last selection
nnoremap <c-\> :%s///g<left><left>

" create folders on save
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * if expand("<afile>")!~#'^\w\+:/' && !isdirectory(expand("%:h")) | execute "silent! !mkdir -p ".shellescape(expand('%:h'), 1) | redraw! | endif
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                               vim-fugitive
set diffopt+=vertical

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                   NERDtree
let g:NERDTreeHijackNetrw=0
"let g:NERDTreeQuitOnOpen = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                   Quickfix
map <C-n> :cnext<cr>
map <C-m> :cprevious<cr>
nnoremap <leader>c :cclose<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                   Go stuff
au BufWritePost *.go silent! !ctags -R &

let g:go_fmt_command = 'goimports'
let g:go_list_type = "quickfix"
let g:go_highlight_types = 1
let g:go_auto_type_info = 1
"set updatetime=100
set autowrite
function! s:build_go_files()
 let l:file = expand('%')
 if l:file =~# '^\f\+_test\.go$'
   call go#test#Test(0, 1)
 elseif l:file =~# '^\f\+\.go$'
   call go#cmd#Build(0)
 endif
endfunction

autocmd FileType go setlocal shiftwidth=4 tabstop=4 noexpandtab

" test with opt+'
autocmd FileType go nmap æ :GoTest<CR>
" test at cursor with opt+shift+'
autocmd FileType go nmap Æ :GoTestFunc<CR>
" toggle coverage with opt+/
autocmd FileType go nmap ÷ :GoCoverageToggle<CR>
" alternate test files with opt+;
autocmd Filetype go nmap … :A<CR>
" alternate test files (vsplit) with opt+shift+;
autocmd FileType go nmap Ú :AV<CR>
" lookup documentation with opt+d
autocmd FileType go nmap ∂ :GoDoc<CR>
" build on save
autocmd BufWritePre *.go :GoBuild

" vim-fugitive stuff
" git status with opt+r
nmap ® :Gstatus<CR>
" git vdiff with opt+s
nmap ß :Gsdiff<CR>

augroup go
    autocmd!
    autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
    autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
    autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                  Highlight
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 0

let g:SuperTabDefaultCompletionType = "context"

au BufRead,BufNewFile *.md set filetype=markdown

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" remove all commented ruby lines
map <leader>cd :call RemoveCommentedLines()<cr><cr>gg

function! RemoveCommentedLines()
  :g/^ *#/d
  :%s/^[\n\t\s\r]*$//g
endfunction

" clear the selection
nnoremap <leader>ch :let @/ = ""<cr>

nnoremap ; :

"===== running tests =====
function! MapCR()
  au FileType ruby nnoremap <cr> :call RunTestFile()<cr>
endfunction
call MapCR()
"au FileType ruby nnoremap <leader>T :call RunNearestTest()<cr>
au FileType ruby nnoremap <leader>y :call RunTests('')<cr>
au Filetype ruby nnoremap <leader>c :w\|:!script/features<cr>
au FileType ruby nnoremap <leader>w :w\|:!script/features --profile wip<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|test_.*\.py\|_test.py\)$') != -1
    if in_test_file
        call SetTestFile(command_suffix)
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction

function! SetTestFile(command_suffix)
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@% . a:command_suffix
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    if expand("%") != ""
      :w
    end
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    else
        " First choice: project-specific test script
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        " Fall back to the .test-commands pipe if available, assuming someone
        " is reading the other side and running the commands
        elseif filewritable(".test-commands")
          let cmd = 'rspec --color --format progress --require "~/lib/vim_rspec_formatter" --format VimFormatter --out tmp/quickfix'
          exec ":!echo " . cmd . " " . a:filename . " > .test-commands"

          " Write an empty string to block until the command completes
          sleep 100m " milliseconds
          :!echo > .test-commands
          redraw!
        " Fall back to a blocking test run with Bundler
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        " If we see python-looking tests, assume they should be run with Nose
        elseif strlen(glob("test/**/*.py") . glob("tests/**/*.py"))
            exec "!nosetests " . a:filename
        " Fall back to a normal blocking test run
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction

function! RubocopAutocorrect()
	if match(expand("%"), '\.rb$') == -1
		return
	end

  let l:tmp_file = tempname()
  call writefile(getline(1,'$'), l:tmp_file)
  let l:rubocop_cmd = "rubocop --auto-correct " . l:tmp_file
  call system(l:rubocop_cmd)
  let @x = join(readfile(l:tmp_file), "\n") . "\n"
	normal ggVGdA
	normal "xP
	write
endfunction

au FileType ruby nnoremap <leader>= :call RubocopAutocorrect()<cr>

let g:esearch = {
  \ 'adapter': 'ag',
  \ 'out': 'qflist',
  \}
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
